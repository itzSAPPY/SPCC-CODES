# Aim: To study and implement code generation algorithms.
def infix_to_postfix(exp):
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2}  
    stack = []  
    postfix = [] 
    
    for char in exp:
        if char.isalnum():  
            postfix.append(char)
        elif char == '(':  
            stack.append(char)
        elif char == ')':  
            while stack and stack[-1] != '(':
                postfix.append(stack.pop())
            stack.pop() 
        else:  
            while stack and precedence.get(stack[-1], 0) >= precedence.get(char, 0):
                postfix.append(stack.pop())
            stack.append(char)
    
    while stack:
        postfix.append(stack.pop())
    
    return postfix

def generate_3ac(postfix):
    three_address_code = []
    stack = []
    
    for token in postfix:
        if token.isalnum():  
            stack.append(token)
        else:  
            operand2 = stack.pop()
            operand1 = stack.pop()
            temp = f't{len(stack) + 1}'  
            three_address_code.append((temp, operand1, token, operand2))
            stack.append(temp)  
    
    return three_address_code


op_code = {
    '+': 'ADD',
    '-': 'SUB',
    '*': 'MUL',
    '/': 'DIV'
}


def code_gen(three_address_code):
    reg_idx = 1  
    moved = {}  
    curr_reg = {} 
    
    for expr in three_address_code:
        print(f"\n#{expr[0]} = {expr[1]} {expr[2]} {expr[3]}")
        
        operands = [1, 3]  
        new = []
        
        for idx in operands:
            if expr[idx] not in moved:
                if '#' not in expr[idx]:
                    moved[expr[idx]] = reg_idx
                    reg_idx += 1
                else:
                    moved[expr[idx]] = curr_reg[int(expr[idx].strip('#'))]
                new.append(expr[idx])
        
        for operand in new:
            if '#' not in operand:
                print(f"MOV R{moved[operand]}, {operand}")
        
        print(f"{op_code[expr[2]]} R{moved[expr[1]]}, R{moved[expr[3]]}")
        curr_reg[expr[0]] = moved[expr[1]]


expression = input("Enter your expression: ")  
postfix = infix_to_postfix(expression)  
three_address_code = generate_3ac(postfix) 
code_gen(three_address_code)  

OUTPUT
Enter your expression:  a+b-c*d

#t1 = a + b
MOV R1, a
MOV R2, b
ADD R1, R2

#t2 = c * d
MOV R3, c
MOV R4, d
MUL R3, R4

#t1 = t1 - t2
MOV R5, t1
MOV R6, t2
SUB R5, R6
